{"version":3,"sources":["customExports.tsx","components/nav/navPod.tsx","components/login/loginPod.tsx","components/upload/uploadPod.tsx","components/ntfs/nftsPod.tsx","env/prod.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["classPrefix","devObj","prefix","view","val","conversion","items","setFn","bucket","map","x","i","title","text","Key","qrcode","prefix0","NavPod","props","nav","name","links","onClick","history","push","className","LoginPod","login","user","label","pass","submit","e","UploadPod","useState","qrCode","setQrCode","upload","file","element","document","createElement","onChange","fetch","env","backend","url","creds","method","body","files","then","res","json","console","log","setAttribute","message","object_url","catch","err","button","click","value","type","onchange","style","flex","NFTSPod","nfts","nftsItems","clientIo","io","on","setNftsItems","error","size","App","useHistory","useEffect","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.283d8b63.chunk.js","sourcesContent":["\r\n\r\nexport  function mediaPrefix(devObj:any){\r\n    let {media} = devObj\r\n    return \"./assets/media/\"+media\r\n}\r\n\r\n\r\nexport function classPrefix(devObj:{view:string}){\r\n    let {view} = devObj\r\n    let prefix = \"a_p_p_\"+view \r\n    return (devObj:{val:string})=>{\r\n        let {val} = devObj\r\n        return prefix+val\r\n    }\r\n}\r\n\r\n// dev additions\r\nexport interface NftsItems {\r\n    title:{\r\n        text:string\r\n    },\r\n    qrcode:{\r\n        text:string\r\n    }\r\n}\r\n\r\nexport let conversion = (devObj:{\r\n    items:any[],\r\n    setFn:Function\r\n    bucket:string\r\n})=>{\r\n    let {items,setFn,bucket} = devObj\r\n    let newItems = items?.map((x,i)=>{\r\n        return{\r\n            title:{\r\n                text:x.Key\r\n            },\r\n            qrcode:{\r\n                text:`https://${bucket}.s3.amazonaws.com/${x.Key}\"             \r\n                `\r\n            }\r\n        }\r\n    })\r\n    setFn(newItems)\r\n}","import React, {useState,useEffect} from 'react';\r\nimport '../../App.scss';\r\nimport {mediaPrefix,classPrefix} from '../../customExports'\r\nimport {Pane} from 'evergreen-ui'\r\n\r\nlet prefix = classPrefix({view:'Nav'});\r\nlet prefix0 = classPrefix({view:'NavMainPod'});\r\n\r\ninterface Props {\r\n    history:any\r\n}\r\n\r\nexport default function NavPod(props:Props){\r\n\r\n\r\n    let nav = {\r\n        name:{\r\n            text:'Feroz'\r\n        },\r\n        links:{\r\n            items:[\"Login\",\"Upload\",\"Your NFT's\"]\r\n            .map((x,i)=>{\r\n                return{\r\n                    text:x,\r\n                    onClick:()=>{\r\n                        props.history.push([\"/\",\"/upload\",\"/nfts\"][i])\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={prefix0({val:''})}>\r\n            <h1 className={prefix0({val:'Name'})}>{nav.name.text}</h1>\r\n            <div className={prefix0({val:'0'})}>\r\n            {\r\n                nav.links.items.map((x,i)=>{\r\n                    return <a onClick={x.onClick}key={i} className={prefix0({val:'0Link'})}>{x.text}</a>\r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}","import React, {useState,useEffect,MouseEventHandler} from 'react';\r\nimport '../../App.scss';\r\nimport {mediaPrefix,classPrefix} from '../../customExports'\r\nimport {Pane} from 'evergreen-ui'\r\n\r\nlet prefix = classPrefix({view:'Login'});\r\nlet prefix0 = classPrefix({view:'LoginPod0'});\r\n\r\ninterface Props  {\r\n    history:any\r\n}\r\n\r\nexport default function LoginPod(props:Props) {\r\n\r\n    let login = {\r\n        user:{\r\n            label:{\r\n                text:'Username'\r\n            }\r\n        },\r\n        pass:{\r\n            label:{\r\n                text:'Password'\r\n            }\r\n        },\r\n        submit:{\r\n            text:\"Submit\",\r\n            onClick:(e: React.MouseEvent)=>{\r\n                props.history.push('/upload')\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={prefix({val:'View'})}>\r\n        <div className={prefix0({val:''})}>\r\n            <div className={prefix0({val:'Pod0'})}>\r\n                <div className={prefix0({val:'Pod0Item'})} >\r\n                    <label>{login.user.label.text}</label>\r\n                    <input className={prefix0({val:'Pod0Input'})}/>\r\n                </div>\r\n                <div className={prefix0({val:'Pod0Item'})} >\r\n                    <label>{login.pass.label.text}</label>\r\n                    <input  className={prefix0({val:'Pod0Input'})}/>\r\n                </div>  \r\n                <button \r\n                onClick={login.submit.onClick}\r\n                className={prefix0({val:'Pod0Button'})}>\r\n                    {login.submit.text}\r\n                </button>              \r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React, {useState,useEffect,MouseEventHandler} from 'react';\r\nimport '../../App.scss';\r\nimport {mediaPrefix,classPrefix} from '../../customExports'\r\nimport {Pane} from 'evergreen-ui'\r\nimport QRCode from \"react-qr-code\";\r\n\r\nlet prefix = classPrefix({view:'Upload'});\r\nlet prefix0 = classPrefix({view:'UploadPod0'});\r\n\r\ninterface Props  {\r\n    // history:any\r\n    env:any\r\n}\r\n\r\n\r\nexport default function UploadPod(props:Props){\r\n    let [qrCode,setQrCode] = useState('');\r\n    \r\n    \r\n    let upload = {\r\n        file:{\r\n            element:document.createElement('input') ,\r\n            onChange:()=>{\r\n\r\n                \r\n                fetch(`${props.env.backend.url}/upload/${props.env.creds.user}`,{method:\"POST\",body:upload.file.element.files?.[0]})\r\n                .then(res=>res.json())\r\n                .then(res=>{\r\n                    console.log(res)\r\n                    upload.file.element.setAttribute('type','text')\r\n                    upload.file.element.setAttribute('type','file')\r\n                    setQrCode(res.message.object_url)\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err)\r\n                    upload.file.element.setAttribute('type','text')\r\n                    upload.file.element.setAttribute('type','file')                    \r\n                })\r\n            }\r\n        },\r\n        button:{\r\n            onClick:()=>{\r\n                upload.file.element.click()\r\n            },\r\n            text:\"Upload Content\"\r\n        },\r\n        qrcode:{\r\n            value:qrCode\r\n        }\r\n    }\r\n\r\n    // modifying file\r\n    upload.file.element.type = 'file';\r\n    upload.file.element.onchange = upload.file.onChange;\r\n    // \r\n\r\n    return (\r\n        <div className={prefix({val:'View'})}>\r\n            <div className={prefix({val:'MainPod'})}>\r\n                <div className={prefix0({val:''})}>\r\n                    <div \r\n                    className={prefix0({val:'Item'})}\r\n                    style={{flex:\"1 0 100%\"}}>\r\n                        <button \r\n                        onClick={upload.button.onClick}\r\n                        className={prefix0({val:'Button'})}\r\n                        >{upload.button.text}</button>\r\n                    </div>\r\n                    <QRCode value={upload.qrcode.value}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState,useEffect} from 'react';\r\nimport '../../App.scss';\r\nimport {mediaPrefix,classPrefix,NftsItems,conversion} from '../../customExports'\r\nimport {Pane} from 'evergreen-ui'\r\nimport QRCode from \"react-qr-code\";\r\nimport { io } from 'socket.io-client';\r\n\r\n\r\n\r\nlet prefix = classPrefix({view:'NFTS'});\r\nlet prefix0 = classPrefix({view:'NFTSPod0'});\r\n\r\n\r\ninterface Props {\r\n    env:any,\r\n    nftsItems:NftsItems[],\r\n    setNftsItems:Function\r\n}\r\n\r\nexport default function NFTSPod(props:Props){\r\n\r\n\r\n\r\n    let nfts = {\r\n        items:props.nftsItems,\r\n        conversion,\r\n        clientIo : io(props.env.backend.url)\r\n    }\r\n\r\n    // update from socketIo\r\n        // make xhr for new items\r\n    nfts.clientIo.on('update',(devObj:any)=>{\r\n        fetch(`${props.env.backend.url}/list/${props.env.creds.user}`)\r\n        .then(res=>res.json())\r\n        .then(res=>{\r\n            conversion({\r\n                items:res.message.files,\r\n                setFn:props.setNftsItems,\r\n                bucket:props.env.creds.bucket\r\n            })            \r\n        })\r\n        .catch(console.error)\r\n    })\r\n    // \r\n    \r\n\r\n    return <div className={prefix({val:'View'})}>\r\n        <div className={prefix({val:'MainPod'})}>\r\n            <div className={prefix0({val:''})}>\r\n                <h1>Your NFT's</h1>\r\n                <div className={prefix0({val:'Item0'})}>\r\n                {\r\n                    nfts.items.map((x,i)=>{\r\n                        return <div key={i} className={prefix0({val:'Item1'})}>\r\n                            <h2>{x.title.text}</h2>\r\n                            <QRCode size={64} value={x.qrcode.text}/>\r\n                        </div>\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","\r\nexport  let  env = {\r\n    backend:{\r\n        url:\"https://feroz-qrcode-app.herokuapp.com\"\r\n    },\r\n    creds:{\r\n        user:\"feroz\",\r\n        bucket:\"feroz-qrcode-app\"\r\n    }\r\n}","import React , {useState,useEffect} from 'react';\nimport './App.scss';\nimport { mediaPrefix,NftsItems,conversion } from './customExports'\nimport NavPod from './components/nav/navPod'\nimport LoginPod from './components/login/loginPod'\nimport UploadPod from './components/upload/uploadPod';\nimport NFTSPod from './components/ntfs/nftsPod';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport {env} from './env/prod';\n\n\n\nfunction App() {\n\n    let history = useHistory();\n    let [nftsItems,setNftsItems] = useState<NftsItems[]>([]);\n    useEffect(()=>{\n        fetch(`${env.backend.url}/list/${env.creds.user}`)\n        .then(res=>res.json())\n        .then(res=>{\n            conversion({\n                items:res.message.files,\n                setFn:setNftsItems,\n                bucket:env.creds.bucket\n            })\n        })\n        .catch(console.error)        \n    },[env.creds.user])\n\n\n    return (\n        <>\n            <NavPod history={history}/>\n            <Switch>\n                <Route exact path=\"/\" render={\n                    (props:any) => {\n\n                        props.history = history\n                        return <LoginPod  {...props}/>\n                    }\n                }>\n                </Route>\n                <Route path=\"/upload\" render={\n                    (props:any) => {\n\n                        props.env = env\n                        return <UploadPod  {...props}/>\n                    }\n                }>                    \n                </Route>\n                <Route path=\"/nfts\" render={\n                    (props:any) => {\n                        props.env = env\n                        props.nftsItems = nftsItems\n                        props.setNftsItems = setNftsItems\n                        return <NFTSPod  {...props}/>\n                    }\n                }>                    \n                </Route>                \n            </Switch>\n        </>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}